First, I read from the configuration file to get the address and port. I also set up two fd_sets master and read_fds to use with select later on. Then, I call socket to provide me with a descriptor to communicate using IPv4 addresses and two-way connection type stream. We bind the address and port to the socket with bind() and use listen() to accept incoming communications, with a backlog of 4. Once we have successfully performed all the calls, we enter a while loop and call select, which I am using to handle multiple requests. Select will block and wait until there is any activity from the socket descriptors in the fd_set read_fds.

Multiple requests are handled via using select(). We first set up two fd_sets master and read_fds. Initially only serversocket_fd is in the set so we set serversocket_fd to be the maximum descriptor so we pass this into select. I set up two fd_sets because select changes the fd_set that is provided to it as an argument so that sockets are ready to read but I may not want some sockets to read if there is nothing to read so I have two sets to avoid that situation. I keep track of everything in a master and copy everything to read_fds at the start of each loop. Select will then monitor for any activity on the socket descriptors.

If there is a new connection, we check if this connection is coming from the serversocket_fd. If it is we have a new client connection and I call accept() to acknowledge the connection and get ready for reading. In the process accept() returns a new socket descriptor so I add this to the fd_set. I also do a check to see if this new descriptor is larger than the max descriptor so I can reset this max descriptor as required. Now we have a new client that is connected to the server.

If the connection is not from serversocket_fd then an existing connection from a client is sending us a message. I do a for loop through every descriptor in the read_fds set to find which descriptor is sending us a message. Once we found the descriptor, we receive the message and perform invalid checks and echo request type checks. We then send the respective response back to the client. Restart the loop and wait for any more activity through select().
